// Generated by view binder compiler. Do not edit!
package fr.isen.sebastien_SILVANO.androiderestaurant.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import fr.isen.sebastien_SILVANO.androiderestaurant.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BleServiceCharacteristicRecViewCellBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView bleServiceCharacteristic;

  @NonNull
  public final TextView bleServiceCharacteristicUuid;

  @NonNull
  public final Button bleServiceNotifyButton;

  @NonNull
  public final TextView bleServiceProperties;

  @NonNull
  public final Button bleServiceReadButton;

  @NonNull
  public final TextView bleServiceValue;

  @NonNull
  public final Button bleServiceWriteButton;

  private BleServiceCharacteristicRecViewCellBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView bleServiceCharacteristic, @NonNull TextView bleServiceCharacteristicUuid,
      @NonNull Button bleServiceNotifyButton, @NonNull TextView bleServiceProperties,
      @NonNull Button bleServiceReadButton, @NonNull TextView bleServiceValue,
      @NonNull Button bleServiceWriteButton) {
    this.rootView = rootView;
    this.bleServiceCharacteristic = bleServiceCharacteristic;
    this.bleServiceCharacteristicUuid = bleServiceCharacteristicUuid;
    this.bleServiceNotifyButton = bleServiceNotifyButton;
    this.bleServiceProperties = bleServiceProperties;
    this.bleServiceReadButton = bleServiceReadButton;
    this.bleServiceValue = bleServiceValue;
    this.bleServiceWriteButton = bleServiceWriteButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BleServiceCharacteristicRecViewCellBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BleServiceCharacteristicRecViewCellBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.ble_service_characteristic_rec_view_cell, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BleServiceCharacteristicRecViewCellBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ble_service_characteristic;
      TextView bleServiceCharacteristic = rootView.findViewById(id);
      if (bleServiceCharacteristic == null) {
        break missingId;
      }

      id = R.id.ble_service_characteristic_uuid;
      TextView bleServiceCharacteristicUuid = rootView.findViewById(id);
      if (bleServiceCharacteristicUuid == null) {
        break missingId;
      }

      id = R.id.ble_service_notify_button;
      Button bleServiceNotifyButton = rootView.findViewById(id);
      if (bleServiceNotifyButton == null) {
        break missingId;
      }

      id = R.id.ble_service_properties;
      TextView bleServiceProperties = rootView.findViewById(id);
      if (bleServiceProperties == null) {
        break missingId;
      }

      id = R.id.ble_service_read_button;
      Button bleServiceReadButton = rootView.findViewById(id);
      if (bleServiceReadButton == null) {
        break missingId;
      }

      id = R.id.ble_service_value;
      TextView bleServiceValue = rootView.findViewById(id);
      if (bleServiceValue == null) {
        break missingId;
      }

      id = R.id.ble_service_write_button;
      Button bleServiceWriteButton = rootView.findViewById(id);
      if (bleServiceWriteButton == null) {
        break missingId;
      }

      return new BleServiceCharacteristicRecViewCellBinding((ConstraintLayout) rootView,
          bleServiceCharacteristic, bleServiceCharacteristicUuid, bleServiceNotifyButton,
          bleServiceProperties, bleServiceReadButton, bleServiceValue, bleServiceWriteButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
